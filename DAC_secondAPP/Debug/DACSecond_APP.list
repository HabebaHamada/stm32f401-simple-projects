
DACSecond_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000058c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a474  08000720  08000720  00010720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab94  0800ab94  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab94  0800ab94  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab94  0800ab94  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab94  0800ab94  0001ab94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab98  0800ab98  0001ab98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  0800ab9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000008  0800aba4  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  0800aba4  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cc2  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000560  00000000  00000000  00020cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00021260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000f8  00000000  00000000  000213c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f0b  00000000  00000000  000214b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000bf4  00000000  00000000  000233c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008bdc  00000000  00000000  00023fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002cb93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000380  00000000  00000000  0002cbe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000708 	.word	0x08000708

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08000708 	.word	0x08000708

080001d4 <DAC_voidSendAudio>:
 * RETURN TYPE: void
 * ARGUMENTS: void
 * DESCRIPTION: SEND Audio
 */
void DAC_voidSendAudio()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	static u16 x = 0;
	GPIO_voidSetGroupChannel(DAC_DATA_PORT, DAC_START_PIN, 8, PTR_TO_FUNC[x++]);
 80001d8:	4b0d      	ldr	r3, [pc, #52]	; (8000210 <DAC_voidSendAudio+0x3c>)
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	4b0d      	ldr	r3, [pc, #52]	; (8000214 <DAC_voidSendAudio+0x40>)
 80001de:	881b      	ldrh	r3, [r3, #0]
 80001e0:	1c59      	adds	r1, r3, #1
 80001e2:	b288      	uxth	r0, r1
 80001e4:	490b      	ldr	r1, [pc, #44]	; (8000214 <DAC_voidSendAudio+0x40>)
 80001e6:	8008      	strh	r0, [r1, #0]
 80001e8:	4413      	add	r3, r2
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	b29b      	uxth	r3, r3
 80001ee:	2208      	movs	r2, #8
 80001f0:	2100      	movs	r1, #0
 80001f2:	2000      	movs	r0, #0
 80001f4:	f000 f81c 	bl	8000230 <GPIO_voidSetGroupChannel>

	if(x == DAC_ARRAY_SIZE) x = 0;
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <DAC_voidSendAudio+0x40>)
 80001fa:	881b      	ldrh	r3, [r3, #0]
 80001fc:	461a      	mov	r2, r3
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <DAC_voidSendAudio+0x44>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	429a      	cmp	r2, r3
 8000204:	d102      	bne.n	800020c <DAC_voidSendAudio+0x38>
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <DAC_voidSendAudio+0x40>)
 8000208:	2200      	movs	r2, #0
 800020a:	801a      	strh	r2, [r3, #0]

}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}
 8000210:	20000004 	.word	0x20000004
 8000214:	20000024 	.word	0x20000024
 8000218:	20000000 	.word	0x20000000

0800021c <DAC_voidStartAudio>:
 * RETURN TYPE: void
 * ARGUMENTS: void
 * DESCRIPTION: Start DAC
 */
void DAC_voidStartAudio()
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	STK_voidSetPeriodicInterval(TICK_TIME,DAC_voidSendAudio);
 8000220:	4902      	ldr	r1, [pc, #8]	; (800022c <DAC_voidStartAudio+0x10>)
 8000222:	2064      	movs	r0, #100	; 0x64
 8000224:	f000 f9ba 	bl	800059c <STK_voidSetPeriodicInterval>
	
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}
 800022c:	080001d5 	.word	0x080001d5

08000230 <GPIO_voidSetGroupChannel>:
	return Local_u8ErrorState;
	
}

void GPIO_voidSetGroupChannel(u8 Copy_u8Port,Pins_t Copy_u8StartPin,u8 Copy_u8ChannelWidth,u16 Copy_u8Value)
{
 8000230:	b490      	push	{r4, r7}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	4604      	mov	r4, r0
 8000238:	4608      	mov	r0, r1
 800023a:	4611      	mov	r1, r2
 800023c:	461a      	mov	r2, r3
 800023e:	4623      	mov	r3, r4
 8000240:	71fb      	strb	r3, [r7, #7]
 8000242:	4603      	mov	r3, r0
 8000244:	71bb      	strb	r3, [r7, #6]
 8000246:	460b      	mov	r3, r1
 8000248:	717b      	strb	r3, [r7, #5]
 800024a:	4613      	mov	r3, r2
 800024c:	807b      	strh	r3, [r7, #2]
	switch(Copy_u8Port)
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	2b02      	cmp	r3, #2
 8000252:	d030      	beq.n	80002b6 <GPIO_voidSetGroupChannel+0x86>
 8000254:	2b02      	cmp	r3, #2
 8000256:	dc43      	bgt.n	80002e0 <GPIO_voidSetGroupChannel+0xb0>
 8000258:	2b00      	cmp	r3, #0
 800025a:	d002      	beq.n	8000262 <GPIO_voidSetGroupChannel+0x32>
 800025c:	2b01      	cmp	r3, #1
 800025e:	d015      	beq.n	800028c <GPIO_voidSetGroupChannel+0x5c>
	{ case GPIO_PORTA:REG_GPIO_PORTA->ODR=BitManipulationSetBits(REG_GPIO_PORTA->ODR,Copy_u8StartPin,Copy_u8ChannelWidth,Copy_u8Value);break;
	  case GPIO_PORTB:REG_GPIO_PORTB->ODR=BitManipulationSetBits(REG_GPIO_PORTB->ODR,Copy_u8StartPin,Copy_u8ChannelWidth,Copy_u8Value);break;
	  case GPIO_PORTC:REG_GPIO_PORTC->ODR=BitManipulationSetBits(REG_GPIO_PORTC->ODR,Copy_u8StartPin,Copy_u8ChannelWidth,Copy_u8Value);break;
	}

}
 8000260:	e03e      	b.n	80002e0 <GPIO_voidSetGroupChannel+0xb0>
	{ case GPIO_PORTA:REG_GPIO_PORTA->ODR=BitManipulationSetBits(REG_GPIO_PORTA->ODR,Copy_u8StartPin,Copy_u8ChannelWidth,Copy_u8Value);break;
 8000262:	4b22      	ldr	r3, [pc, #136]	; (80002ec <GPIO_voidSetGroupChannel+0xbc>)
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	797a      	ldrb	r2, [r7, #5]
 8000268:	2101      	movs	r1, #1
 800026a:	fa01 f202 	lsl.w	r2, r1, r2
 800026e:	1e51      	subs	r1, r2, #1
 8000270:	79ba      	ldrb	r2, [r7, #6]
 8000272:	fa01 f202 	lsl.w	r2, r1, r2
 8000276:	43d2      	mvns	r2, r2
 8000278:	4013      	ands	r3, r2
 800027a:	8879      	ldrh	r1, [r7, #2]
 800027c:	79ba      	ldrb	r2, [r7, #6]
 800027e:	fa01 f202 	lsl.w	r2, r1, r2
 8000282:	4611      	mov	r1, r2
 8000284:	4a19      	ldr	r2, [pc, #100]	; (80002ec <GPIO_voidSetGroupChannel+0xbc>)
 8000286:	430b      	orrs	r3, r1
 8000288:	6153      	str	r3, [r2, #20]
 800028a:	e029      	b.n	80002e0 <GPIO_voidSetGroupChannel+0xb0>
	  case GPIO_PORTB:REG_GPIO_PORTB->ODR=BitManipulationSetBits(REG_GPIO_PORTB->ODR,Copy_u8StartPin,Copy_u8ChannelWidth,Copy_u8Value);break;
 800028c:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <GPIO_voidSetGroupChannel+0xc0>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	797a      	ldrb	r2, [r7, #5]
 8000292:	2101      	movs	r1, #1
 8000294:	fa01 f202 	lsl.w	r2, r1, r2
 8000298:	1e51      	subs	r1, r2, #1
 800029a:	79ba      	ldrb	r2, [r7, #6]
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	43d2      	mvns	r2, r2
 80002a2:	4013      	ands	r3, r2
 80002a4:	8879      	ldrh	r1, [r7, #2]
 80002a6:	79ba      	ldrb	r2, [r7, #6]
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	4611      	mov	r1, r2
 80002ae:	4a10      	ldr	r2, [pc, #64]	; (80002f0 <GPIO_voidSetGroupChannel+0xc0>)
 80002b0:	430b      	orrs	r3, r1
 80002b2:	6153      	str	r3, [r2, #20]
 80002b4:	e014      	b.n	80002e0 <GPIO_voidSetGroupChannel+0xb0>
	  case GPIO_PORTC:REG_GPIO_PORTC->ODR=BitManipulationSetBits(REG_GPIO_PORTC->ODR,Copy_u8StartPin,Copy_u8ChannelWidth,Copy_u8Value);break;
 80002b6:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <GPIO_voidSetGroupChannel+0xc4>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	797a      	ldrb	r2, [r7, #5]
 80002bc:	2101      	movs	r1, #1
 80002be:	fa01 f202 	lsl.w	r2, r1, r2
 80002c2:	1e51      	subs	r1, r2, #1
 80002c4:	79ba      	ldrb	r2, [r7, #6]
 80002c6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ca:	43d2      	mvns	r2, r2
 80002cc:	4013      	ands	r3, r2
 80002ce:	8879      	ldrh	r1, [r7, #2]
 80002d0:	79ba      	ldrb	r2, [r7, #6]
 80002d2:	fa01 f202 	lsl.w	r2, r1, r2
 80002d6:	4611      	mov	r1, r2
 80002d8:	4a06      	ldr	r2, [pc, #24]	; (80002f4 <GPIO_voidSetGroupChannel+0xc4>)
 80002da:	430b      	orrs	r3, r1
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	bf00      	nop
}
 80002e0:	bf00      	nop
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc90      	pop	{r4, r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40020000 	.word	0x40020000
 80002f0:	40020400 	.word	0x40020400
 80002f4:	40020800 	.word	0x40020800

080002f8 <PORT_voidInit>:
#include"PORT_private.h"
#include"PORT_config.h"
#include"PORT_interface.h"

void PORT_voidInit(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	
	GPIOA_MODER = GPIOA_Mode;
 80002fc:	4b27      	ldr	r3, [pc, #156]	; (800039c <PORT_voidInit+0xa4>)
 80002fe:	4a28      	ldr	r2, [pc, #160]	; (80003a0 <PORT_voidInit+0xa8>)
 8000300:	601a      	str	r2, [r3, #0]
	GPIOB_MODER = GPIOB_Mode;
 8000302:	4b28      	ldr	r3, [pc, #160]	; (80003a4 <PORT_voidInit+0xac>)
 8000304:	4a28      	ldr	r2, [pc, #160]	; (80003a8 <PORT_voidInit+0xb0>)
 8000306:	601a      	str	r2, [r3, #0]
	GPIOC_MODER = GPIOC_Mode;
 8000308:	4b28      	ldr	r3, [pc, #160]	; (80003ac <PORT_voidInit+0xb4>)
 800030a:	f04f 42a8 	mov.w	r2, #1409286144	; 0x54000000
 800030e:	601a      	str	r2, [r3, #0]
	
	GPIOA_OTYPER = GPIOA_Output_Type ;
 8000310:	4b27      	ldr	r3, [pc, #156]	; (80003b0 <PORT_voidInit+0xb8>)
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
	GPIOB_OTYPER = GPIOB_Output_Type ;
 8000316:	4b27      	ldr	r3, [pc, #156]	; (80003b4 <PORT_voidInit+0xbc>)
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
	GPIOC_OTYPER = GPIOC_Output_Type ;
 800031c:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <PORT_voidInit+0xc0>)
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
	
	GPIOA_OSPEEDR = GPIOA_Speed;
 8000322:	4b26      	ldr	r3, [pc, #152]	; (80003bc <PORT_voidInit+0xc4>)
 8000324:	4a26      	ldr	r2, [pc, #152]	; (80003c0 <PORT_voidInit+0xc8>)
 8000326:	601a      	str	r2, [r3, #0]
	GPIOB_OSPEEDR = GPIOB_Speed;
 8000328:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <PORT_voidInit+0xcc>)
 800032a:	4a1f      	ldr	r2, [pc, #124]	; (80003a8 <PORT_voidInit+0xb0>)
 800032c:	601a      	str	r2, [r3, #0]
	GPIOC_OSPEEDR = GPIOC_Speed;
 800032e:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <PORT_voidInit+0xd0>)
 8000330:	f04f 42a8 	mov.w	r2, #1409286144	; 0x54000000
 8000334:	601a      	str	r2, [r3, #0]
	
	GPIOA_PUPDR = GPIOA_PUPD;
 8000336:	4b25      	ldr	r3, [pc, #148]	; (80003cc <PORT_voidInit+0xd4>)
 8000338:	4a25      	ldr	r2, [pc, #148]	; (80003d0 <PORT_voidInit+0xd8>)
 800033a:	601a      	str	r2, [r3, #0]
	GPIOB_PUPDR = GPIOB_PUPD;
 800033c:	4b25      	ldr	r3, [pc, #148]	; (80003d4 <PORT_voidInit+0xdc>)
 800033e:	4a1a      	ldr	r2, [pc, #104]	; (80003a8 <PORT_voidInit+0xb0>)
 8000340:	601a      	str	r2, [r3, #0]
	GPIOC_PUPDR = GPIOC_PUPD;
 8000342:	4b25      	ldr	r3, [pc, #148]	; (80003d8 <PORT_voidInit+0xe0>)
 8000344:	f04f 42a8 	mov.w	r2, #1409286144	; 0x54000000
 8000348:	601a      	str	r2, [r3, #0]
	

    
    GPIOA_AFRL|=(GPIOA_AF<< GPIOx_AFRL0);
 800034a:	4b24      	ldr	r3, [pc, #144]	; (80003dc <PORT_voidInit+0xe4>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a23      	ldr	r2, [pc, #140]	; (80003dc <PORT_voidInit+0xe4>)
 8000350:	f043 33bb 	orr.w	r3, r3, #3149642683	; 0xbbbbbbbb
 8000354:	6013      	str	r3, [r2, #0]
	GPIOB_AFRL|=(GPIOB_AF<< GPIOx_AFRL0);
 8000356:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <PORT_voidInit+0xe8>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a21      	ldr	r2, [pc, #132]	; (80003e0 <PORT_voidInit+0xe8>)
 800035c:	f043 33bb 	orr.w	r3, r3, #3149642683	; 0xbbbbbbbb
 8000360:	6013      	str	r3, [r2, #0]
	GPIOC_AFRL|=(GPIOC_AF<< GPIOx_AFRL0);
 8000362:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <PORT_voidInit+0xec>)
 8000364:	4a1f      	ldr	r2, [pc, #124]	; (80003e4 <PORT_voidInit+0xec>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	6013      	str	r3, [r2, #0]
								
    GPIOA_AFRH|= (GPIOA_AF>> 32);
 800036a:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <PORT_voidInit+0xf0>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	491e      	ldr	r1, [pc, #120]	; (80003e8 <PORT_voidInit+0xf0>)
 8000370:	4b1e      	ldr	r3, [pc, #120]	; (80003ec <PORT_voidInit+0xf4>)
 8000372:	4313      	orrs	r3, r2
 8000374:	600b      	str	r3, [r1, #0]
	GPIOB_AFRH|= (GPIOB_AF>> 32);
 8000376:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <PORT_voidInit+0xf8>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	491d      	ldr	r1, [pc, #116]	; (80003f0 <PORT_voidInit+0xf8>)
 800037c:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <PORT_voidInit+0xfc>)
 800037e:	4313      	orrs	r3, r2
 8000380:	600b      	str	r3, [r1, #0]
	GPIOC_AFRH|= (GPIOC_AF>> 32);
 8000382:	4b1d      	ldr	r3, [pc, #116]	; (80003f8 <PORT_voidInit+0x100>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a1c      	ldr	r2, [pc, #112]	; (80003f8 <PORT_voidInit+0x100>)
 8000388:	f043 433b 	orr.w	r3, r3, #3137339392	; 0xbb000000
 800038c:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8000390:	6013      	str	r3, [r2, #0]
	
	
}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	40020000 	.word	0x40020000
 80003a0:	69555555 	.word	0x69555555
 80003a4:	40020400 	.word	0x40020400
 80003a8:	55155555 	.word	0x55155555
 80003ac:	40020800 	.word	0x40020800
 80003b0:	40020004 	.word	0x40020004
 80003b4:	40020404 	.word	0x40020404
 80003b8:	40020804 	.word	0x40020804
 80003bc:	40020008 	.word	0x40020008
 80003c0:	41555555 	.word	0x41555555
 80003c4:	40020408 	.word	0x40020408
 80003c8:	40020808 	.word	0x40020808
 80003cc:	4002000c 	.word	0x4002000c
 80003d0:	65555555 	.word	0x65555555
 80003d4:	4002040c 	.word	0x4002040c
 80003d8:	4002080c 	.word	0x4002080c
 80003dc:	40020020 	.word	0x40020020
 80003e0:	40020420 	.word	0x40020420
 80003e4:	40020820 	.word	0x40020820
 80003e8:	40020024 	.word	0x40020024
 80003ec:	b00bbbbb 	.word	0xb00bbbbb
 80003f0:	40020424 	.word	0x40020424
 80003f4:	bbbb0bbb 	.word	0xbbbb0bbb
 80003f8:	40020824 	.word	0x40020824

080003fc <RCC_voidSysClkInit>:
#include"RCC_config.h"
#include"RCC_interface.h"


void	RCC_voidSysClkInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

    /******************MCO1,2 Prescaler*************/
  	RCC->CFGR|=(Microcontroller_Clk1_Prescaler<<RCC_CFGR_MCO1PRE0);
 8000400:	4b3a      	ldr	r3, [pc, #232]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	4a39      	ldr	r2, [pc, #228]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 8000406:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800040a:	6093      	str	r3, [r2, #8]
	RCC->CFGR|=(Microcontroller_Clk2_Prescaler<<RCC_CFGR_MCO2PRE0);
 800040c:	4b37      	ldr	r3, [pc, #220]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	4a36      	ldr	r2, [pc, #216]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 8000412:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000416:	6093      	str	r3, [r2, #8]

    /******************MCO1,2 Source Selection*************/
	RCC->CFGR|=(Microcontroller_Clk_Output1<<RCC_CFGR_MCO10);
 8000418:	4b34      	ldr	r3, [pc, #208]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	4a33      	ldr	r2, [pc, #204]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 800041e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000422:	6093      	str	r3, [r2, #8]
  	RCC->CFGR|=(Microcontroller_Clk_Output2<<RCC_CFGR_MCO20);
 8000424:	4b31      	ldr	r3, [pc, #196]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 8000426:	4a31      	ldr	r2, [pc, #196]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	6093      	str	r3, [r2, #8]


    /*************** Clock Security System ***************/
  	RCC->CR|=(RCC_u8CSSON<<RCC_CR_CSSON);
 800042c:	4b2f      	ldr	r3, [pc, #188]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a2e      	ldr	r2, [pc, #184]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 8000432:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000436:	6013      	str	r3, [r2, #0]

	/*************** Clock Source Switch ***************/
  	RCC->CFGR|=(System_Clk_Source<<RCC_CFGR_SW0);
 8000438:	4b2c      	ldr	r3, [pc, #176]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 800043a:	4a2c      	ldr	r2, [pc, #176]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	6093      	str	r3, [r2, #8]

	/****************** AHB Prescaler ******************/
  	RCC->CFGR|=(RCC_u8SYSCLK_Division_by_2<<RCC_CFGR_HPRE0);
 8000440:	4b2a      	ldr	r3, [pc, #168]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	4a29      	ldr	r2, [pc, #164]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 8000446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800044a:	6093      	str	r3, [r2, #8]


	/****************** APB1 Prescaler ******************/
  	RCC->CFGR|=(RCC_u8APB1_PRESCALER<<RCC_CFGR_PPRE10);
 800044c:	4b27      	ldr	r3, [pc, #156]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	4a26      	ldr	r2, [pc, #152]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 8000452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000456:	6093      	str	r3, [r2, #8]
	/****************** APB2 Prescaler ******************/
	
  	RCC->CFGR|=(RCC_u8APB2_PRESCALER<<RCC_CFGR_PPRE20);
 8000458:	4b24      	ldr	r3, [pc, #144]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	4a23      	ldr	r2, [pc, #140]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 800045e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000462:	6093      	str	r3, [r2, #8]



	
	#if RCC_u8PLL_Mode==RCC_u8Clk_Enable
  	RCC->PLLCFGR=0;
 8000464:	4b21      	ldr	r3, [pc, #132]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 8000466:	2200      	movs	r2, #0
 8000468:	605a      	str	r2, [r3, #4]
  	RCC->PLLCFGR|=(PLL_InClk_Division_Factor<<RCC_PLLCFGR_PLLM0);
 800046a:	4b20      	ldr	r3, [pc, #128]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	4a1f      	ldr	r2, [pc, #124]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 8000470:	f043 0302 	orr.w	r3, r3, #2
 8000474:	6053      	str	r3, [r2, #4]
  	RCC->PLLCFGR|=(PLL_VCO_Multiplication_Factor<<RCC_PLLCFGR_PLLN0);
 8000476:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	4a1c      	ldr	r2, [pc, #112]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 800047c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000480:	6053      	str	r3, [r2, #4]
  	RCC->PLLCFGR|=(PLL_MainClk_Division_Factor<<RCC_PLLCFGR_PLLP0);
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	4a19      	ldr	r2, [pc, #100]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 8000488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800048c:	6053      	str	r3, [r2, #4]
  	RCC->PLLCFGR|=(PLL_Clk_Source<<RCC_PLLCFGR_PLLSRC);
 800048e:	4b17      	ldr	r3, [pc, #92]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 8000490:	4a16      	ldr	r2, [pc, #88]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	6053      	str	r3, [r2, #4]
  	RCC->PLLCFGR|=(PLL_USB_OTG_Division_Factor<<RCC_PLLCFGR_PLLQ0);
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	4a14      	ldr	r2, [pc, #80]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 800049c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004a0:	6053      	str	r3, [r2, #4]

	
  	RCC->CR|=(RCC_u8PLL_Mode<<RCC_CR_PLLON);
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a11      	ldr	r2, [pc, #68]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 80004a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004ac:	6013      	str	r3, [r2, #0]

	while(!GET_BIT(RCC->CR,RCC_CR_PLLRDY));
 80004ae:	bf00      	nop
 80004b0:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 80004b2:	681b      	ldr	r3, [r3, #0]

	#endif
	
	#if RCC_u8HSEON_Mode==RCC_u8Clk_Enable
	/*************** Clock By Pass Enable ***************/
  	RCC->CR|=(RCC_u8HSEPYB<<RCC_CR_HSEBYP);
 80004b4:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 80004b6:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	6013      	str	r3, [r2, #0]
  	RCC->CR|=(RCC_u8HSEON_Mode<<RCC_CR_HSEON);
 80004bc:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 80004c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004c6:	6013      	str	r3, [r2, #0]

	while(!GET_BIT(RCC->CR,RCC_CR_HSIRDY));
 80004c8:	bf00      	nop
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 80004cc:	681b      	ldr	r3, [r3, #0]

    #endif
	
	#if RCC_u8HSION_Mode==RCC_u8Clk_Enable
  	RCC->CR|=(RCC_u8HSION_Mode<<RCC_CR_HSION);
 80004ce:	4b07      	ldr	r3, [pc, #28]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a06      	ldr	r2, [pc, #24]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6013      	str	r3, [r2, #0]

	while(!GET_BIT(RCC->CR,RCC_CR_HSERDY));
 80004da:	bf00      	nop
 80004dc:	4b03      	ldr	r3, [pc, #12]	; (80004ec <RCC_voidSysClkInit+0xf0>)
 80004de:	681b      	ldr	r3, [r3, #0]

    #endif	
	
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40023800 	.word	0x40023800

080004f0 <RCC_voidPeripheralClockEnable>:
  
u8	RCC_voidPeripheralClockEnable(u8 RCC_u8CopyBus,Peripherals_t RCC_u8CopyPeripheral)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	460a      	mov	r2, r1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	4613      	mov	r3, r2
 80004fe:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8Error=OK;
 8000500:	2301      	movs	r3, #1
 8000502:	73fb      	strb	r3, [r7, #15]
	if (RCC_u8CopyPeripheral<32)
 8000504:	79bb      	ldrb	r3, [r7, #6]
 8000506:	2b1f      	cmp	r3, #31
 8000508:	d83d      	bhi.n	8000586 <RCC_voidPeripheralClockEnable+0x96>
	{
		switch(RCC_u8CopyBus)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	2b03      	cmp	r3, #3
 800050e:	d837      	bhi.n	8000580 <RCC_voidPeripheralClockEnable+0x90>
 8000510:	a201      	add	r2, pc, #4	; (adr r2, 8000518 <RCC_voidPeripheralClockEnable+0x28>)
 8000512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000516:	bf00      	nop
 8000518:	08000529 	.word	0x08000529
 800051c:	0800053f 	.word	0x0800053f
 8000520:	08000555 	.word	0x08000555
 8000524:	0800056b 	.word	0x0800056b
		{
			case RCC_AHB1: SET_BIT(RCC->AHB1ENR,RCC_u8CopyPeripheral);break;
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <RCC_voidPeripheralClockEnable+0xa8>)
 800052a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052c:	79ba      	ldrb	r2, [r7, #6]
 800052e:	2101      	movs	r1, #1
 8000530:	fa01 f202 	lsl.w	r2, r1, r2
 8000534:	4611      	mov	r1, r2
 8000536:	4a18      	ldr	r2, [pc, #96]	; (8000598 <RCC_voidPeripheralClockEnable+0xa8>)
 8000538:	430b      	orrs	r3, r1
 800053a:	6313      	str	r3, [r2, #48]	; 0x30
 800053c:	e025      	b.n	800058a <RCC_voidPeripheralClockEnable+0x9a>
			case RCC_AHB2: SET_BIT(RCC->AHB2ENR,RCC_u8CopyPeripheral);break;
 800053e:	4b16      	ldr	r3, [pc, #88]	; (8000598 <RCC_voidPeripheralClockEnable+0xa8>)
 8000540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000542:	79ba      	ldrb	r2, [r7, #6]
 8000544:	2101      	movs	r1, #1
 8000546:	fa01 f202 	lsl.w	r2, r1, r2
 800054a:	4611      	mov	r1, r2
 800054c:	4a12      	ldr	r2, [pc, #72]	; (8000598 <RCC_voidPeripheralClockEnable+0xa8>)
 800054e:	430b      	orrs	r3, r1
 8000550:	6353      	str	r3, [r2, #52]	; 0x34
 8000552:	e01a      	b.n	800058a <RCC_voidPeripheralClockEnable+0x9a>
			case RCC_APB1: SET_BIT(RCC->APB1ENR,RCC_u8CopyPeripheral);break;
 8000554:	4b10      	ldr	r3, [pc, #64]	; (8000598 <RCC_voidPeripheralClockEnable+0xa8>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	79ba      	ldrb	r2, [r7, #6]
 800055a:	2101      	movs	r1, #1
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	4611      	mov	r1, r2
 8000562:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <RCC_voidPeripheralClockEnable+0xa8>)
 8000564:	430b      	orrs	r3, r1
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	e00f      	b.n	800058a <RCC_voidPeripheralClockEnable+0x9a>
			case RCC_APB2: SET_BIT(RCC->APB2ENR,RCC_u8CopyPeripheral);break;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <RCC_voidPeripheralClockEnable+0xa8>)
 800056c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800056e:	79ba      	ldrb	r2, [r7, #6]
 8000570:	2101      	movs	r1, #1
 8000572:	fa01 f202 	lsl.w	r2, r1, r2
 8000576:	4611      	mov	r1, r2
 8000578:	4a07      	ldr	r2, [pc, #28]	; (8000598 <RCC_voidPeripheralClockEnable+0xa8>)
 800057a:	430b      	orrs	r3, r1
 800057c:	6453      	str	r3, [r2, #68]	; 0x44
 800057e:	e004      	b.n	800058a <RCC_voidPeripheralClockEnable+0x9a>
			default : Local_u8Error =NOK;
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	e001      	b.n	800058a <RCC_voidPeripheralClockEnable+0x9a>
			
	}
	else
	{
		
		Local_u8Error =NOK;
 8000586:	2300      	movs	r3, #0
 8000588:	73fb      	strb	r3, [r7, #15]
		
	}
		
		
	return Local_u8Error;
 800058a:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
 800058c:	4618      	mov	r0, r3
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	40023800 	.word	0x40023800

0800059c <STK_voidSetPeriodicInterval>:
	/*Start Timer*/
	SET_BIT(STK->CTRL, ENABLE);
}

void STK_voidSetPeriodicInterval(u32 Copy_u32TickCount, void (*CallBackFunction)(void))
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]

	/*LOAD Ticks TO Load Register */
	STK->LOAD = (Copy_u32TickCount - 1) & 0x00FFFFFF;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <STK_voidSetPeriodicInterval+0x48>)
 80005ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80005b0:	6053      	str	r3, [r2, #4]

	/*Save Call back function*/
	STK_CallBack = CallBackFunction;
 80005b2:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <STK_voidSetPeriodicInterval+0x4c>)
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	6013      	str	r3, [r2, #0]

	/*Set Mode to Periodic Interval*/
	STK_u8ModeOFInterval = STK_PERIODIC_INTERVAL;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <STK_voidSetPeriodicInterval+0x50>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]

	/*Enable Systick Interrupt*/
	SET_BIT(STK->CTRL, TICKINT);
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <STK_voidSetPeriodicInterval+0x48>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <STK_voidSetPeriodicInterval+0x48>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	6013      	str	r3, [r2, #0]

	/*Start Timer*/
	SET_BIT(STK->CTRL, ENABLE);
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <STK_voidSetPeriodicInterval+0x48>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <STK_voidSetPeriodicInterval+0x48>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6013      	str	r3, [r2, #0]
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	e000e010 	.word	0xe000e010
 80005e8:	20000028 	.word	0x20000028
 80005ec:	2000002c 	.word	0x2000002c

080005f0 <SysTick_Handler>:
{
	return STK->VAL;
}


void SysTick_Handler(void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0

	u8 Local_u8Temporary;

	if(STK_u8ModeOFInterval == STK_SINGLE_INTERVAL)
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <SysTick_Handler+0x50>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d111      	bne.n	8000622 <SysTick_Handler+0x32>
	{
		/*Disable Systick Interrupt*/
		CLEAR_BIT(STK->CTRL, TICKINT);
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <SysTick_Handler+0x54>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a10      	ldr	r2, [pc, #64]	; (8000644 <SysTick_Handler+0x54>)
 8000604:	f023 0302 	bic.w	r3, r3, #2
 8000608:	6013      	str	r3, [r2, #0]

		/*Stop Timer*/
		CLEAR_BIT(STK->CTRL, ENABLE);
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <SysTick_Handler+0x54>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <SysTick_Handler+0x54>)
 8000610:	f023 0301 	bic.w	r3, r3, #1
 8000614:	6013      	str	r3, [r2, #0]

		/*Clear LOAD , VAL Registers to stop reload*/
		STK->LOAD=0;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <SysTick_Handler+0x54>)
 8000618:	2200      	movs	r2, #0
 800061a:	605a      	str	r2, [r3, #4]
		STK->VAL=0;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <SysTick_Handler+0x54>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]


	}

	/*Call Back Notification*/
	STK_CallBack();
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <SysTick_Handler+0x58>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4798      	blx	r3

	/*Clear Interrupt Flag by Reading it*/
	Local_u8Temporary=GET_BIT(STK->CTRL, COUNTFLAG);
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <SysTick_Handler+0x54>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	0c1b      	lsrs	r3, r3, #16
 800062e:	b2db      	uxtb	r3, r3
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	71fb      	strb	r3, [r7, #7]
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000002c 	.word	0x2000002c
 8000644:	e000e010 	.word	0xe000e010
 8000648:	20000028 	.word	0x20000028

0800064c <main>:

#include "DAC_interface.h"


int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	RCC_voidSysClkInit();
 8000650:	f7ff fed4 	bl	80003fc <RCC_voidSysClkInit>

	RCC_voidPeripheralClockEnable(RCC_AHB1,GPIOA);
 8000654:	2100      	movs	r1, #0
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ff4a 	bl	80004f0 <RCC_voidPeripheralClockEnable>

	PORT_voidInit();
 800065c:	f7ff fe4c 	bl	80002f8 <PORT_voidInit>
	DAC_voidStartAudio();
 8000660:	f7ff fddc 	bl	800021c <DAC_voidStartAudio>
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000670:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000676:	490d      	ldr	r1, [pc, #52]	; (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <LoopForever+0xe>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800068c:	4c0a      	ldr	r4, [pc, #40]	; (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800069a:	f000 f811 	bl	80006c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff ffd5 	bl	800064c <main>

080006a2 <LoopForever>:

LoopForever:
    b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   r0, =_estack
 80006a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80006b0:	0800ab9c 	.word	0x0800ab9c
  ldr r2, =_sbss
 80006b4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80006b8:	20000030 	.word	0x20000030

080006bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC_IRQHandler>
	...

080006c0 <__libc_init_array>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	4d0d      	ldr	r5, [pc, #52]	; (80006f8 <__libc_init_array+0x38>)
 80006c4:	4c0d      	ldr	r4, [pc, #52]	; (80006fc <__libc_init_array+0x3c>)
 80006c6:	1b64      	subs	r4, r4, r5
 80006c8:	10a4      	asrs	r4, r4, #2
 80006ca:	2600      	movs	r6, #0
 80006cc:	42a6      	cmp	r6, r4
 80006ce:	d109      	bne.n	80006e4 <__libc_init_array+0x24>
 80006d0:	4d0b      	ldr	r5, [pc, #44]	; (8000700 <__libc_init_array+0x40>)
 80006d2:	4c0c      	ldr	r4, [pc, #48]	; (8000704 <__libc_init_array+0x44>)
 80006d4:	f000 f818 	bl	8000708 <_init>
 80006d8:	1b64      	subs	r4, r4, r5
 80006da:	10a4      	asrs	r4, r4, #2
 80006dc:	2600      	movs	r6, #0
 80006de:	42a6      	cmp	r6, r4
 80006e0:	d105      	bne.n	80006ee <__libc_init_array+0x2e>
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e8:	4798      	blx	r3
 80006ea:	3601      	adds	r6, #1
 80006ec:	e7ee      	b.n	80006cc <__libc_init_array+0xc>
 80006ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f2:	4798      	blx	r3
 80006f4:	3601      	adds	r6, #1
 80006f6:	e7f2      	b.n	80006de <__libc_init_array+0x1e>
 80006f8:	0800ab94 	.word	0x0800ab94
 80006fc:	0800ab94 	.word	0x0800ab94
 8000700:	0800ab94 	.word	0x0800ab94
 8000704:	0800ab98 	.word	0x0800ab98

08000708 <_init>:
 8000708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070a:	bf00      	nop
 800070c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800070e:	bc08      	pop	{r3}
 8000710:	469e      	mov	lr, r3
 8000712:	4770      	bx	lr

08000714 <_fini>:
 8000714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000716:	bf00      	nop
 8000718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800071a:	bc08      	pop	{r3}
 800071c:	469e      	mov	lr, r3
 800071e:	4770      	bx	lr
