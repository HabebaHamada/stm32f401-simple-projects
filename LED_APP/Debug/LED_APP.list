
LED_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005a8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800073c  0800073c  0001073c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000754  08000754  0001075c  2**0
                  CONTENTS
  4 .ARM          00000000  08000754  08000754  0001075c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000754  0800075c  0001075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000754  08000754  00010754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000758  08000758  00010758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800075c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800075c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001075c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006c4  00000000  00000000  0001078c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000358  00000000  00000000  00010e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f8  00000000  00000000  000111a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  000112a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000205b  00000000  00000000  00011340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000999  00000000  00000000  0001339b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008cbb  00000000  00000000  00013d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001c9ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000218  00000000  00000000  0001ca40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000724 	.word	0x08000724

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000724 	.word	0x08000724

080001d4 <GPIO_u8WritePinValue>:
#include "GPIO_register.h"
#include "GPIO_private.h"


u8  GPIO_u8WritePinValue(u8 Copy_u8Pin, u8 Copy_u8Port, u8 Copy_u8Value)
{	
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	460b      	mov	r3, r1
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	717b      	strb	r3, [r7, #5]
	u8 Local_u8ErrorState=FALSE;
 80001e6:	2300      	movs	r3, #0
 80001e8:	73fb      	strb	r3, [r7, #15]
	if ((Copy_u8Pin < GPIO_u8NumOfPins)&&(Copy_u8Port < GPIO_u8NumOfPorts))
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2b0f      	cmp	r3, #15
 80001ee:	d820      	bhi.n	8000232 <GPIO_u8WritePinValue+0x5e>
 80001f0:	79bb      	ldrb	r3, [r7, #6]
 80001f2:	2b02      	cmp	r3, #2
 80001f4:	d81d      	bhi.n	8000232 <GPIO_u8WritePinValue+0x5e>
	{
	   ASSIGN_BIT(*GPIO_u8Arr_ODR[Copy_u8Port],Copy_u8Pin, Copy_u8Value);
 80001f6:	79bb      	ldrb	r3, [r7, #6]
 80001f8:	4a11      	ldr	r2, [pc, #68]	; (8000240 <GPIO_u8WritePinValue+0x6c>)
 80001fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001fe:	881b      	ldrh	r3, [r3, #0]
 8000200:	b21a      	sxth	r2, r3
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	2101      	movs	r1, #1
 8000206:	fa01 f303 	lsl.w	r3, r1, r3
 800020a:	b21b      	sxth	r3, r3
 800020c:	43db      	mvns	r3, r3
 800020e:	b21b      	sxth	r3, r3
 8000210:	4013      	ands	r3, r2
 8000212:	b21a      	sxth	r2, r3
 8000214:	7979      	ldrb	r1, [r7, #5]
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	fa01 f303 	lsl.w	r3, r1, r3
 800021c:	b21b      	sxth	r3, r3
 800021e:	4313      	orrs	r3, r2
 8000220:	b219      	sxth	r1, r3
 8000222:	79bb      	ldrb	r3, [r7, #6]
 8000224:	4a06      	ldr	r2, [pc, #24]	; (8000240 <GPIO_u8WritePinValue+0x6c>)
 8000226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800022a:	b28a      	uxth	r2, r1
 800022c:	801a      	strh	r2, [r3, #0]
	   Local_u8ErrorState=TRUE;
 800022e:	2301      	movs	r3, #1
 8000230:	73fb      	strb	r3, [r7, #15]
	   
	}
		
	return Local_u8ErrorState;
 8000232:	7bfb      	ldrb	r3, [r7, #15]
}
 8000234:	4618      	mov	r0, r3
 8000236:	3714      	adds	r7, #20
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr
 8000240:	0800073c 	.word	0x0800073c

08000244 <GPIO_u8ReadPinValue>:
  			
	return Local_u8ErrorState;
}

u8  GPIO_u8ReadPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_u8PTRvalue)
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	603a      	str	r2, [r7, #0]
 800024e:	71fb      	strb	r3, [r7, #7]
 8000250:	460b      	mov	r3, r1
 8000252:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8ErrorState=FALSE;
 8000254:	2300      	movs	r3, #0
 8000256:	73fb      	strb	r3, [r7, #15]
	
	if ((Copy_u8PTRvalue!=NULL) && (Copy_u8Pin<GPIO_u8NumOfPins))
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d016      	beq.n	800028c <GPIO_u8ReadPinValue+0x48>
 800025e:	79bb      	ldrb	r3, [r7, #6]
 8000260:	2b0f      	cmp	r3, #15
 8000262:	d813      	bhi.n	800028c <GPIO_u8ReadPinValue+0x48>
	{
		
		*Copy_u8PTRvalue =GET_BIT(*GPIO_u8Arr_IDR[Copy_u8Port], Copy_u8Pin);
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	4a0d      	ldr	r2, [pc, #52]	; (800029c <GPIO_u8ReadPinValue+0x58>)
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	881b      	ldrh	r3, [r3, #0]
 800026e:	4619      	mov	r1, r3
 8000270:	79bb      	ldrb	r3, [r7, #6]
 8000272:	2201      	movs	r2, #1
 8000274:	fa02 f303 	lsl.w	r3, r2, r3
 8000278:	ea01 0203 	and.w	r2, r1, r3
 800027c:	79bb      	ldrb	r3, [r7, #6]
 800027e:	fa42 f303 	asr.w	r3, r2, r3
 8000282:	b2da      	uxtb	r2, r3
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	701a      	strb	r2, [r3, #0]
		Local_u8ErrorState=TRUE;
 8000288:	2301      	movs	r3, #1
 800028a:	73fb      	strb	r3, [r7, #15]
		
	} 

	return Local_u8ErrorState;
 800028c:	7bfb      	ldrb	r3, [r7, #15]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	08000748 	.word	0x08000748

080002a0 <LED_Status>:

#include "LED_interface.h"


void LED_Status(LED_Object Copy_LED,u8 Copy_u8LED_Status)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	460b      	mov	r3, r1
 80002aa:	70fb      	strb	r3, [r7, #3]
	GPIO_u8WritePinValue(Copy_LED.LED_Pin, Copy_LED.LED_Port,(Copy_u8LED_Status) ^ (Copy_LED.Connection_Type));
 80002ac:	79b8      	ldrb	r0, [r7, #6]
 80002ae:	7979      	ldrb	r1, [r7, #5]
 80002b0:	793a      	ldrb	r2, [r7, #4]
 80002b2:	78fb      	ldrb	r3, [r7, #3]
 80002b4:	4053      	eors	r3, r2
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	461a      	mov	r2, r3
 80002ba:	f7ff ff8b 	bl	80001d4 <GPIO_u8WritePinValue>
	
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <PORT_VoidInit>:
#include"PORT_private.h"
#include"PORT_config.h"
#include"PORT_interface.h"

void PORT_VoidInit(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
	
	GPIOA_MODER = GPIOA_Mode;
 80002cc:	4b3f      	ldr	r3, [pc, #252]	; (80003cc <PORT_VoidInit+0x104>)
 80002ce:	4a40      	ldr	r2, [pc, #256]	; (80003d0 <PORT_VoidInit+0x108>)
 80002d0:	601a      	str	r2, [r3, #0]
	GPIOB_MODER = GPIOB_Mode;
 80002d2:	4b40      	ldr	r3, [pc, #256]	; (80003d4 <PORT_VoidInit+0x10c>)
 80002d4:	4a40      	ldr	r2, [pc, #256]	; (80003d8 <PORT_VoidInit+0x110>)
 80002d6:	601a      	str	r2, [r3, #0]
	GPIOC_MODER = GPIOC_Mode;
 80002d8:	4b40      	ldr	r3, [pc, #256]	; (80003dc <PORT_VoidInit+0x114>)
 80002da:	f04f 42a8 	mov.w	r2, #1409286144	; 0x54000000
 80002de:	601a      	str	r2, [r3, #0]
	
	GPIOA_OTYPER = GPIOA_Output_Type ;
 80002e0:	4b3f      	ldr	r3, [pc, #252]	; (80003e0 <PORT_VoidInit+0x118>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
	GPIOB_OTYPER = GPIOB_Output_Type ;
 80002e6:	4b3f      	ldr	r3, [pc, #252]	; (80003e4 <PORT_VoidInit+0x11c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
	GPIOC_OTYPER = GPIOC_Output_Type ;
 80002ec:	4b3e      	ldr	r3, [pc, #248]	; (80003e8 <PORT_VoidInit+0x120>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
	
	GPIOA_OSPEEDR = GPIOA_Speed;
 80002f2:	4b3e      	ldr	r3, [pc, #248]	; (80003ec <PORT_VoidInit+0x124>)
 80002f4:	4a3e      	ldr	r2, [pc, #248]	; (80003f0 <PORT_VoidInit+0x128>)
 80002f6:	601a      	str	r2, [r3, #0]
	GPIOB_OSPEEDR = GPIOB_Speed;
 80002f8:	4b3e      	ldr	r3, [pc, #248]	; (80003f4 <PORT_VoidInit+0x12c>)
 80002fa:	4a3f      	ldr	r2, [pc, #252]	; (80003f8 <PORT_VoidInit+0x130>)
 80002fc:	601a      	str	r2, [r3, #0]
	GPIOC_OSPEEDR = GPIOC_Speed;
 80002fe:	4b3f      	ldr	r3, [pc, #252]	; (80003fc <PORT_VoidInit+0x134>)
 8000300:	f04f 42a8 	mov.w	r2, #1409286144	; 0x54000000
 8000304:	601a      	str	r2, [r3, #0]
	
	GPIOA_PUPDR = GPIOA_PUPD;
 8000306:	4b3e      	ldr	r3, [pc, #248]	; (8000400 <PORT_VoidInit+0x138>)
 8000308:	4a3e      	ldr	r2, [pc, #248]	; (8000404 <PORT_VoidInit+0x13c>)
 800030a:	601a      	str	r2, [r3, #0]
	GPIOB_PUPDR = GPIOB_PUPD;
 800030c:	4b3e      	ldr	r3, [pc, #248]	; (8000408 <PORT_VoidInit+0x140>)
 800030e:	4a3f      	ldr	r2, [pc, #252]	; (800040c <PORT_VoidInit+0x144>)
 8000310:	601a      	str	r2, [r3, #0]
	GPIOC_PUPDR = GPIOC_PUPD;
 8000312:	4b3f      	ldr	r3, [pc, #252]	; (8000410 <PORT_VoidInit+0x148>)
 8000314:	f04f 42a8 	mov.w	r2, #1409286144	; 0x54000000
 8000318:	601a      	str	r2, [r3, #0]
	
#if Lock_key ==Not_Active_Lock	 //Problem
	SET_BIT(GPIOA_LCKR,GPIOx_LCKR_LCKK)  ;
 800031a:	4b3e      	ldr	r3, [pc, #248]	; (8000414 <PORT_VoidInit+0x14c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a3d      	ldr	r2, [pc, #244]	; (8000414 <PORT_VoidInit+0x14c>)
 8000320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000324:	6013      	str	r3, [r2, #0]
	SET_BIT(GPIOB_LCKR,GPIOx_LCKR_LCKK)  ;
 8000326:	4b3c      	ldr	r3, [pc, #240]	; (8000418 <PORT_VoidInit+0x150>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a3b      	ldr	r2, [pc, #236]	; (8000418 <PORT_VoidInit+0x150>)
 800032c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000330:	6013      	str	r3, [r2, #0]
	SET_BIT(GPIOC_LCKR,GPIOx_LCKR_LCKK)  ;
 8000332:	4b3a      	ldr	r3, [pc, #232]	; (800041c <PORT_VoidInit+0x154>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a39      	ldr	r2, [pc, #228]	; (800041c <PORT_VoidInit+0x154>)
 8000338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800033c:	6013      	str	r3, [r2, #0]

    CLEAR_BIT(GPIOA_LCKR,GPIOx_LCKR_LCKK)  ;
 800033e:	4b35      	ldr	r3, [pc, #212]	; (8000414 <PORT_VoidInit+0x14c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a34      	ldr	r2, [pc, #208]	; (8000414 <PORT_VoidInit+0x14c>)
 8000344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000348:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(GPIOB_LCKR,GPIOx_LCKR_LCKK)  ;
 800034a:	4b33      	ldr	r3, [pc, #204]	; (8000418 <PORT_VoidInit+0x150>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a32      	ldr	r2, [pc, #200]	; (8000418 <PORT_VoidInit+0x150>)
 8000350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000354:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(GPIOC_LCKR,GPIOx_LCKR_LCKK)  ;
 8000356:	4b31      	ldr	r3, [pc, #196]	; (800041c <PORT_VoidInit+0x154>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a30      	ldr	r2, [pc, #192]	; (800041c <PORT_VoidInit+0x154>)
 800035c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000360:	6013      	str	r3, [r2, #0]

	GPIOA_LCKR = GPIOA_Lock;
 8000362:	4b2c      	ldr	r3, [pc, #176]	; (8000414 <PORT_VoidInit+0x14c>)
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
	GPIOB_LCKR = GPIOB_Lock;
 8000368:	4b2b      	ldr	r3, [pc, #172]	; (8000418 <PORT_VoidInit+0x150>)
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
	GPIOC_LCKR = GPIOC_Lock;
 800036e:	4b2b      	ldr	r3, [pc, #172]	; (800041c <PORT_VoidInit+0x154>)
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
	
	SET_BIT(GPIOA_LCKR,GPIOx_LCKR_LCKK)  ;
 8000374:	4b27      	ldr	r3, [pc, #156]	; (8000414 <PORT_VoidInit+0x14c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a26      	ldr	r2, [pc, #152]	; (8000414 <PORT_VoidInit+0x14c>)
 800037a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800037e:	6013      	str	r3, [r2, #0]
	SET_BIT(GPIOB_LCKR,GPIOx_LCKR_LCKK)  ;
 8000380:	4b25      	ldr	r3, [pc, #148]	; (8000418 <PORT_VoidInit+0x150>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a24      	ldr	r2, [pc, #144]	; (8000418 <PORT_VoidInit+0x150>)
 8000386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800038a:	6013      	str	r3, [r2, #0]
	SET_BIT(GPIOC_LCKR,GPIOx_LCKR_LCKK)  ;
 800038c:	4b23      	ldr	r3, [pc, #140]	; (800041c <PORT_VoidInit+0x154>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a22      	ldr	r2, [pc, #136]	; (800041c <PORT_VoidInit+0x154>)
 8000392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000396:	6013      	str	r3, [r2, #0]
	
#endif

    GPIOA_AFRL= BitManipulationGetBits(GPIOA_AF, GPIOx_AFRL0, 32);
 8000398:	4b21      	ldr	r3, [pc, #132]	; (8000420 <PORT_VoidInit+0x158>)
 800039a:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 800039e:	601a      	str	r2, [r3, #0]
	GPIOB_AFRL= BitManipulationGetBits(GPIOB_AF, GPIOx_AFRL0, 32);
 80003a0:	4b20      	ldr	r3, [pc, #128]	; (8000424 <PORT_VoidInit+0x15c>)
 80003a2:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 80003a6:	601a      	str	r2, [r3, #0]
	GPIOC_AFRL= BitManipulationGetBits(GPIOC_AF, GPIOx_AFRL0, 32);
 80003a8:	4b1f      	ldr	r3, [pc, #124]	; (8000428 <PORT_VoidInit+0x160>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
								
    GPIOA_AFRH= BitManipulationGetBits(GPIOA_AF, 32, 32);
 80003ae:	4b1f      	ldr	r3, [pc, #124]	; (800042c <PORT_VoidInit+0x164>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
	GPIOB_AFRH= BitManipulationGetBits(GPIOB_AF, 32, 32);
 80003b4:	4b1e      	ldr	r3, [pc, #120]	; (8000430 <PORT_VoidInit+0x168>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
	GPIOC_AFRH= BitManipulationGetBits(GPIOC_AF, 32, 32);
 80003ba:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <PORT_VoidInit+0x16c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
	
	
	
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40020000 	.word	0x40020000
 80003d0:	69555555 	.word	0x69555555
 80003d4:	40020400 	.word	0x40020400
 80003d8:	55155550 	.word	0x55155550
 80003dc:	40020800 	.word	0x40020800
 80003e0:	40020004 	.word	0x40020004
 80003e4:	40020404 	.word	0x40020404
 80003e8:	40020804 	.word	0x40020804
 80003ec:	40020008 	.word	0x40020008
 80003f0:	41555555 	.word	0x41555555
 80003f4:	40020408 	.word	0x40020408
 80003f8:	55155555 	.word	0x55155555
 80003fc:	40020808 	.word	0x40020808
 8000400:	4002000c 	.word	0x4002000c
 8000404:	65555555 	.word	0x65555555
 8000408:	4002040c 	.word	0x4002040c
 800040c:	5515555a 	.word	0x5515555a
 8000410:	4002080c 	.word	0x4002080c
 8000414:	4002001c 	.word	0x4002001c
 8000418:	4002041c 	.word	0x4002041c
 800041c:	4002081c 	.word	0x4002081c
 8000420:	40020020 	.word	0x40020020
 8000424:	40020420 	.word	0x40020420
 8000428:	40020820 	.word	0x40020820
 800042c:	40020024 	.word	0x40020024
 8000430:	40020424 	.word	0x40020424
 8000434:	40020824 	.word	0x40020824

08000438 <RCC_voidSysClkInit>:
#include"RCC_config.h"
#include"RCC_interface.h"


void	RCC_voidSysClkInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
	/****************** AHB Prescaler ******************/
	RCC_CFGR= BitManipulationSetBits(RCC_CFGR,RCC_CFGR_HPRE0,4,RCC_u8SYSCLK_Division_by_2);
 800043c:	4b49      	ldr	r3, [pc, #292]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000444:	4a47      	ldr	r2, [pc, #284]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 8000446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800044a:	6013      	str	r3, [r2, #0]

	/****************** APB1 Prescaler ******************/
	ASSIGN_BIT(RCC_CFGR,RCC_CFGR_PPRE10,GET_BIT(RCC_u8APB1_PRESCALER,0));
 800044c:	4b45      	ldr	r3, [pc, #276]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a44      	ldr	r2, [pc, #272]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 8000452:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000456:	6013      	str	r3, [r2, #0]
	ASSIGN_BIT(RCC_CFGR,RCC_CFGR_PPRE11,GET_BIT(RCC_u8APB1_PRESCALER,1));
 8000458:	4b42      	ldr	r3, [pc, #264]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a41      	ldr	r2, [pc, #260]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 800045e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000462:	6013      	str	r3, [r2, #0]
	ASSIGN_BIT(RCC_CFGR,RCC_CFGR_PPRE12,GET_BIT(RCC_u8APB1_PRESCALER,2));
 8000464:	4b3f      	ldr	r3, [pc, #252]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a3e      	ldr	r2, [pc, #248]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 800046a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800046e:	6013      	str	r3, [r2, #0]
	/****************** APB2 Prescaler ******************/
	ASSIGN_BIT(RCC_CFGR,RCC_CFGR_PPRE20,GET_BIT(RCC_u8APB2_PRESCALER,0));
 8000470:	4b3c      	ldr	r3, [pc, #240]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a3b      	ldr	r2, [pc, #236]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 8000476:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800047a:	6013      	str	r3, [r2, #0]
	ASSIGN_BIT(RCC_CFGR,RCC_CFGR_PPRE21,GET_BIT(RCC_u8APB2_PRESCALER,1));
 800047c:	4b39      	ldr	r3, [pc, #228]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a38      	ldr	r2, [pc, #224]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 8000482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000486:	6013      	str	r3, [r2, #0]
	ASSIGN_BIT(RCC_CFGR,RCC_CFGR_PPRE22,GET_BIT(RCC_u8APB2_PRESCALER,2));
 8000488:	4b36      	ldr	r3, [pc, #216]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a35      	ldr	r2, [pc, #212]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 800048e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000492:	6013      	str	r3, [r2, #0]
	
    /*************** Clock Security System ***************/
  	ASSIGN_BIT(RCC_CR,RCC_CR_CSSON,GET_BIT(RCC_u8CSSON,0));
 8000494:	4b34      	ldr	r3, [pc, #208]	; (8000568 <RCC_voidSysClkInit+0x130>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a33      	ldr	r2, [pc, #204]	; (8000568 <RCC_voidSysClkInit+0x130>)
 800049a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800049e:	6013      	str	r3, [r2, #0]
	/*************** Clock Source Switch ***************/
   RCC_CFGR= BitManipulationSetBits(RCC_CFGR,RCC_CFGR_SW0,2,System_Clk_Source);
 80004a0:	4b30      	ldr	r3, [pc, #192]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a2f      	ldr	r2, [pc, #188]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 80004a6:	f023 0303 	bic.w	r3, r3, #3
 80004aa:	6013      	str	r3, [r2, #0]
   
   /******************MCO1,2 Source Selection*************/
   RCC_CFGR = BitManipulationSetBits(RCC_CFGR,RCC_CFGR_MCO10,2,Microcontroller_Clk_Output1);
 80004ac:	4b2d      	ldr	r3, [pc, #180]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f023 73b0 	bic.w	r3, r3, #23068672	; 0x1600000
 80004b4:	4a2b      	ldr	r2, [pc, #172]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 80004b6:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 80004ba:	6013      	str	r3, [r2, #0]
   RCC_CFGR = BitManipulationSetBits(RCC_CFGR,RCC_CFGR_MCO20,2,Microcontroller_Clk_Output2);
 80004bc:	4b29      	ldr	r3, [pc, #164]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a28      	ldr	r2, [pc, #160]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 80004c2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80004c6:	6013      	str	r3, [r2, #0]
	
   /******************MCO1,2 Prescaler*************/
   RCC_CFGR= BitManipulationSetBits(RCC_CFGR,RCC_CFGR_MCO1PRE0,3,Microcontroller_Clk1_Prescaler);
 80004c8:	4b26      	ldr	r3, [pc, #152]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004d0:	4a24      	ldr	r2, [pc, #144]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 80004d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80004d6:	6013      	str	r3, [r2, #0]
   RCC_CFGR= BitManipulationSetBits(RCC_CFGR,RCC_CFGR_MCO2PRE0,3,Microcontroller_Clk2_Prescaler);
 80004d8:	4b22      	ldr	r3, [pc, #136]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80004e0:	4a20      	ldr	r2, [pc, #128]	; (8000564 <RCC_voidSysClkInit+0x12c>)
 80004e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80004e6:	6013      	str	r3, [r2, #0]

	
	#if RCC_u8PLL_Mode==RCC_u8Clk_Enable
	RCC_PLLCFGR=BitManipulationSetBits(RCC_PLLCFGR,RCC_PLLCFGR_PLLM0,6,PLL_InClk_Division_Factor);
 80004e8:	4b20      	ldr	r3, [pc, #128]	; (800056c <RCC_voidSysClkInit+0x134>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80004f0:	4a1e      	ldr	r2, [pc, #120]	; (800056c <RCC_voidSysClkInit+0x134>)
 80004f2:	f043 0308 	orr.w	r3, r3, #8
 80004f6:	6013      	str	r3, [r2, #0]
    RCC_PLLCFGR=BitManipulationSetBits(RCC_PLLCFGR,RCC_PLLCFGR_PLLN0,9,PLL_VCO_Multiplication_Factor);
 80004f8:	4b1c      	ldr	r3, [pc, #112]	; (800056c <RCC_voidSysClkInit+0x134>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000504:	4a19      	ldr	r2, [pc, #100]	; (800056c <RCC_voidSysClkInit+0x134>)
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]
	RCC_PLLCFGR=BitManipulationSetBits(RCC_PLLCFGR,RCC_PLLCFGR_PLLP0,2,PLL_MainClk_Division_Factor);
 800050c:	4b17      	ldr	r3, [pc, #92]	; (800056c <RCC_voidSysClkInit+0x134>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a16      	ldr	r2, [pc, #88]	; (800056c <RCC_voidSysClkInit+0x134>)
 8000512:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000516:	6013      	str	r3, [r2, #0]
    ASSIGN_BIT(RCC_PLLCFGR,RCC_PLLCFGR_PLLSRC,PLL_Clk_Source);
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <RCC_voidSysClkInit+0x134>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a13      	ldr	r2, [pc, #76]	; (800056c <RCC_voidSysClkInit+0x134>)
 800051e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000522:	6013      	str	r3, [r2, #0]
	RCC_PLLCFGR=BitManipulationSetBits(RCC_PLLCFGR,RCC_PLLCFGR_PLLQ0,4,PLL_USB_OTG_Division_Factor);
 8000524:	4b11      	ldr	r3, [pc, #68]	; (800056c <RCC_voidSysClkInit+0x134>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800052c:	4a0f      	ldr	r2, [pc, #60]	; (800056c <RCC_voidSysClkInit+0x134>)
 800052e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000532:	6013      	str	r3, [r2, #0]
	
	
	
	ASSIGN_BIT(RCC_CR,RCC_CR_PLLON,GET_BIT(RCC_u8PLL_Mode  ,0));
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <RCC_voidSysClkInit+0x130>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <RCC_voidSysClkInit+0x130>)
 800053a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800053e:	6013      	str	r3, [r2, #0]
	while(!GET_BIT(RCC_CR,RCC_CR_PLLRDY));
 8000540:	bf00      	nop
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <RCC_voidSysClkInit+0x130>)
 8000544:	681b      	ldr	r3, [r3, #0]

    #endif
	
	#if RCC_u8HSION_Mode==RCC_u8Clk_Enable

    ASSIGN_BIT(RCC_CR,RCC_CR_HSION,GET_BIT(RCC_u8HSION_Mode,0));
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <RCC_voidSysClkInit+0x130>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a07      	ldr	r2, [pc, #28]	; (8000568 <RCC_voidSysClkInit+0x130>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6013      	str	r3, [r2, #0]
	while(!GET_BIT(RCC_CR,RCC_CR_HSERDY));
 8000552:	bf00      	nop
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <RCC_voidSysClkInit+0x130>)
 8000556:	681b      	ldr	r3, [r3, #0]

    #endif	
	
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40023808 	.word	0x40023808
 8000568:	40023800 	.word	0x40023800
 800056c:	40023804 	.word	0x40023804

08000570 <RCC_voidEnablePerClk>:
  
u8	RCC_voidEnablePerClk(u8 RCC_u8CopyBus,u8 RCC_u8CopyPer)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	460a      	mov	r2, r1
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4613      	mov	r3, r2
 800057e:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8Error=OK;
 8000580:	2301      	movs	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
	if (RCC_u8CopyPer<32)
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	2b1f      	cmp	r3, #31
 8000588:	d839      	bhi.n	80005fe <RCC_voidEnablePerClk+0x8e>
	{
		switch(RCC_u8CopyBus)
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b03      	cmp	r3, #3
 800058e:	d833      	bhi.n	80005f8 <RCC_voidEnablePerClk+0x88>
 8000590:	a201      	add	r2, pc, #4	; (adr r2, 8000598 <RCC_voidEnablePerClk+0x28>)
 8000592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000596:	bf00      	nop
 8000598:	080005a9 	.word	0x080005a9
 800059c:	080005bd 	.word	0x080005bd
 80005a0:	080005d1 	.word	0x080005d1
 80005a4:	080005e5 	.word	0x080005e5
		{
			case RCC_AHB1: SET_BIT(RCC_AHB1ENR,RCC_u8CopyPer);
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <RCC_voidEnablePerClk+0xa0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	79ba      	ldrb	r2, [r7, #6]
 80005ae:	2101      	movs	r1, #1
 80005b0:	fa01 f202 	lsl.w	r2, r1, r2
 80005b4:	4611      	mov	r1, r2
 80005b6:	4a16      	ldr	r2, [pc, #88]	; (8000610 <RCC_voidEnablePerClk+0xa0>)
 80005b8:	430b      	orrs	r3, r1
 80005ba:	6013      	str	r3, [r2, #0]
			case RCC_AHB2: SET_BIT(RCC_AHB2ENR,RCC_u8CopyPer);
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <RCC_voidEnablePerClk+0xa4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	79ba      	ldrb	r2, [r7, #6]
 80005c2:	2101      	movs	r1, #1
 80005c4:	fa01 f202 	lsl.w	r2, r1, r2
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <RCC_voidEnablePerClk+0xa4>)
 80005cc:	430b      	orrs	r3, r1
 80005ce:	6013      	str	r3, [r2, #0]
			case RCC_APB1: SET_BIT(RCC_APB1ENR,RCC_u8CopyPer);
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <RCC_voidEnablePerClk+0xa8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	79ba      	ldrb	r2, [r7, #6]
 80005d6:	2101      	movs	r1, #1
 80005d8:	fa01 f202 	lsl.w	r2, r1, r2
 80005dc:	4611      	mov	r1, r2
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <RCC_voidEnablePerClk+0xa8>)
 80005e0:	430b      	orrs	r3, r1
 80005e2:	6013      	str	r3, [r2, #0]
			case RCC_APB2: SET_BIT(RCC_APB2ENR,RCC_u8CopyPer);
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <RCC_voidEnablePerClk+0xac>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	79ba      	ldrb	r2, [r7, #6]
 80005ea:	2101      	movs	r1, #1
 80005ec:	fa01 f202 	lsl.w	r2, r1, r2
 80005f0:	4611      	mov	r1, r2
 80005f2:	4a0a      	ldr	r2, [pc, #40]	; (800061c <RCC_voidEnablePerClk+0xac>)
 80005f4:	430b      	orrs	r3, r1
 80005f6:	6013      	str	r3, [r2, #0]
			default : Local_u8Error =NOK;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
 80005fc:	e001      	b.n	8000602 <RCC_voidEnablePerClk+0x92>
			
	}
	else
	{
		
		Local_u8Error =NOK;
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
		
	}
		
		
	return Local_u8Error;
 8000602:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
 8000604:	4618      	mov	r0, r3
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	40023830 	.word	0x40023830
 8000614:	40023834 	.word	0x40023834
 8000618:	40023840 	.word	0x40023840
 800061c:	40023844 	.word	0x40023844

08000620 <main>:
#include"PORT_interface.h"
#include"LED_interface.h"


int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
	   RCC_voidSysClkInit();
 8000626:	f7ff ff07 	bl	8000438 <RCC_voidSysClkInit>
	   RCC_voidEnablePerClk(RCC_AHB1,AHB1_GPIOA);
 800062a:	2100      	movs	r1, #0
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ff9f 	bl	8000570 <RCC_voidEnablePerClk>
	   RCC_voidEnablePerClk(RCC_AHB1,AHB1_GPIOB);
 8000632:	2101      	movs	r1, #1
 8000634:	2000      	movs	r0, #0
 8000636:	f7ff ff9b 	bl	8000570 <RCC_voidEnablePerClk>

	   PORT_VoidInit();
 800063a:	f7ff fe45 	bl	80002c8 <PORT_VoidInit>


    u8 Local_u8Stat1;
    u8 Local_u8Stat2;

    LED_Object LED1={Source_Connection_type,GPIO_u8PORTA,GPIO_u8PIN0};
 800063e:	2300      	movs	r3, #0
 8000640:	723b      	strb	r3, [r7, #8]
 8000642:	2300      	movs	r3, #0
 8000644:	727b      	strb	r3, [r7, #9]
 8000646:	2300      	movs	r3, #0
 8000648:	72bb      	strb	r3, [r7, #10]
    LED_Object LED2={Source_Connection_type,GPIO_u8PORTA,GPIO_u8PIN1};
 800064a:	2300      	movs	r3, #0
 800064c:	713b      	strb	r3, [r7, #4]
 800064e:	2300      	movs	r3, #0
 8000650:	717b      	strb	r3, [r7, #5]
 8000652:	2301      	movs	r3, #1
 8000654:	71bb      	strb	r3, [r7, #6]

	while(1)
	{
		GPIO_u8ReadPinValue(GPIO_u8PORTB,GPIO_u8PIN0,&Local_u8Stat1);
 8000656:	f107 030f 	add.w	r3, r7, #15
 800065a:	461a      	mov	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	2001      	movs	r0, #1
 8000660:	f7ff fdf0 	bl	8000244 <GPIO_u8ReadPinValue>
		GPIO_u8ReadPinValue(GPIO_u8PORTB,GPIO_u8PIN1,&Local_u8Stat2);
 8000664:	f107 030e 	add.w	r3, r7, #14
 8000668:	461a      	mov	r2, r3
 800066a:	2101      	movs	r1, #1
 800066c:	2001      	movs	r0, #1
 800066e:	f7ff fde9 	bl	8000244 <GPIO_u8ReadPinValue>
		LED_Status(LED1,Local_u8Stat1);
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	4619      	mov	r1, r3
 8000676:	68b8      	ldr	r0, [r7, #8]
 8000678:	f7ff fe12 	bl	80002a0 <LED_Status>
		LED_Status(LED2,Local_u8Stat2);
 800067c:	7bbb      	ldrb	r3, [r7, #14]
 800067e:	4619      	mov	r1, r3
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff fe0d 	bl	80002a0 <LED_Status>
		GPIO_u8ReadPinValue(GPIO_u8PORTB,GPIO_u8PIN0,&Local_u8Stat1);
 8000686:	e7e6      	b.n	8000656 <main+0x36>

08000688 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800068a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800068c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000692:	490d      	ldr	r1, [pc, #52]	; (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000694:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a8:	4c0a      	ldr	r4, [pc, #40]	; (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006b6:	f000 f811 	bl	80006dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ba:	f7ff ffb1 	bl	8000620 <main>

080006be <LoopForever>:

LoopForever:
    b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
  ldr   r0, =_estack
 80006c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006cc:	0800075c 	.word	0x0800075c
  ldr r2, =_sbss
 80006d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006d4:	2000001c 	.word	0x2000001c

080006d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC_IRQHandler>
	...

080006dc <__libc_init_array>:
 80006dc:	b570      	push	{r4, r5, r6, lr}
 80006de:	4d0d      	ldr	r5, [pc, #52]	; (8000714 <__libc_init_array+0x38>)
 80006e0:	4c0d      	ldr	r4, [pc, #52]	; (8000718 <__libc_init_array+0x3c>)
 80006e2:	1b64      	subs	r4, r4, r5
 80006e4:	10a4      	asrs	r4, r4, #2
 80006e6:	2600      	movs	r6, #0
 80006e8:	42a6      	cmp	r6, r4
 80006ea:	d109      	bne.n	8000700 <__libc_init_array+0x24>
 80006ec:	4d0b      	ldr	r5, [pc, #44]	; (800071c <__libc_init_array+0x40>)
 80006ee:	4c0c      	ldr	r4, [pc, #48]	; (8000720 <__libc_init_array+0x44>)
 80006f0:	f000 f818 	bl	8000724 <_init>
 80006f4:	1b64      	subs	r4, r4, r5
 80006f6:	10a4      	asrs	r4, r4, #2
 80006f8:	2600      	movs	r6, #0
 80006fa:	42a6      	cmp	r6, r4
 80006fc:	d105      	bne.n	800070a <__libc_init_array+0x2e>
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f855 3b04 	ldr.w	r3, [r5], #4
 8000704:	4798      	blx	r3
 8000706:	3601      	adds	r6, #1
 8000708:	e7ee      	b.n	80006e8 <__libc_init_array+0xc>
 800070a:	f855 3b04 	ldr.w	r3, [r5], #4
 800070e:	4798      	blx	r3
 8000710:	3601      	adds	r6, #1
 8000712:	e7f2      	b.n	80006fa <__libc_init_array+0x1e>
 8000714:	08000754 	.word	0x08000754
 8000718:	08000754 	.word	0x08000754
 800071c:	08000754 	.word	0x08000754
 8000720:	08000758 	.word	0x08000758

08000724 <_init>:
 8000724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000726:	bf00      	nop
 8000728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800072a:	bc08      	pop	{r3}
 800072c:	469e      	mov	lr, r3
 800072e:	4770      	bx	lr

08000730 <_fini>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	bf00      	nop
 8000734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000736:	bc08      	pop	{r3}
 8000738:	469e      	mov	lr, r3
 800073a:	4770      	bx	lr
